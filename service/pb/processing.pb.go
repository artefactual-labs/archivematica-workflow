// Code generated by protoc-gen-go.
// source: processing.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Job_Status int32

const (
	Job_UNKNOWN                Job_Status = 0
	Job_AWAITING_DECISION      Job_Status = 1
	Job_COMPLETED_SUCCESSFULLY Job_Status = 2
	Job_EXECUTING_COMMANDS     Job_Status = 3
	Job_FAILED                 Job_Status = 4
)

var Job_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "AWAITING_DECISION",
	2: "COMPLETED_SUCCESSFULLY",
	3: "EXECUTING_COMMANDS",
	4: "FAILED",
}
var Job_Status_value = map[string]int32{
	"UNKNOWN":                0,
	"AWAITING_DECISION":      1,
	"COMPLETED_SUCCESSFULLY": 2,
	"EXECUTING_COMMANDS":     3,
	"FAILED":                 4,
}

func (x Job_Status) String() string {
	return proto.EnumName(Job_Status_name, int32(x))
}
func (Job_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type Job struct {
	Status Job_Status `protobuf:"varint,1,opt,name=status,enum=pb.Job_Status" json:"status,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Job) GetStatus() Job_Status {
	if m != nil {
		return m.Status
	}
	return Job_UNKNOWN
}

func init() {
	proto.RegisterType((*Job)(nil), "pb.Job")
	proto.RegisterEnum("pb.Job_Status", Job_Status_name, Job_Status_value)
}

func init() { proto.RegisterFile("processing.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x4f,
	0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x52, 0x9a, 0xcd, 0xc8, 0xc5, 0xec, 0x95, 0x9f, 0x24, 0xa4, 0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x58,
	0x52, 0x5a, 0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67, 0xc4, 0xa7, 0x57, 0x90, 0xa4, 0xe7, 0x95,
	0x9f, 0xa4, 0x17, 0x0c, 0x16, 0x0d, 0x82, 0xca, 0x2a, 0xe5, 0x70, 0xb1, 0x41, 0x44, 0x84, 0xb8,
	0xb9, 0xd8, 0x43, 0xfd, 0xbc, 0xfd, 0xfc, 0xc3, 0xfd, 0x04, 0x18, 0x84, 0x44, 0xb9, 0x04, 0x1d,
	0xc3, 0x1d, 0x3d, 0x43, 0x3c, 0xfd, 0xdc, 0xe3, 0x5d, 0x5c, 0x9d, 0x3d, 0x83, 0x3d, 0xfd, 0xfd,
	0x04, 0x18, 0x85, 0xa4, 0xb8, 0xc4, 0x9c, 0xfd, 0x7d, 0x03, 0x7c, 0x5c, 0x43, 0x5c, 0x5d, 0xe2,
	0x83, 0x43, 0x9d, 0x9d, 0x5d, 0x83, 0x83, 0xdd, 0x42, 0x7d, 0x7c, 0x22, 0x05, 0x98, 0x84, 0xc4,
	0xb8, 0x84, 0x5c, 0x23, 0x5c, 0x9d, 0x43, 0xc1, 0x7a, 0x9c, 0xfd, 0x7d, 0x7d, 0x1d, 0xfd, 0x5c,
	0x82, 0x05, 0x98, 0x85, 0xb8, 0xb8, 0xd8, 0xdc, 0x1c, 0x3d, 0x7d, 0x5c, 0x5d, 0x04, 0x58, 0x92,
	0xd8, 0xc0, 0x0e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x73, 0x0d, 0x0a, 0xc9, 0xbc, 0x00,
	0x00, 0x00,
}
